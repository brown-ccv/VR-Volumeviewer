name: superbuild-and-bat3exe-test

on:  workflow_dispatch

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build_windows:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    
    runs-on: windows-2019

    steps:
    - uses: actions/checkout@v2
    - uses: ilammy/msvc-dev-cmd@v1
    - uses: seanmiddleditch/gha-setup-ninja@master
    
    - name: Clean superbuild folder
      run: superbuild/clean/clean.bat
      
    - name: Open superbuild folder
      run: cd superbuild

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
           cd superbuild 
           cmake -S . -B . -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G Ninja
    - name: Build
      # Build your program with the given configuration
      run: |
           cd superbuild
           ninja
    - name: clone bat2exe
      run: |
           cd superbuild
           git clone https://github.com/islamadel/bat2exe.git
      
    - name: Copy bat2exec script to create .exe
      shell: cmd
      run: copy superbuild\scripts\CCV_VR_VWR.bat superbuild\install_Windows\bin
    - name: List files on bin folder
      run: |
           cd superbuild\install_Windows\bin
           dir
    - name: run bat2exec in the background and create vr-volumeviewer executable 
      shell: cmd
      run: superbuild\scripts\execute_bat2exe_background.bat ${{github.workspace}}
    - name: Upload app to release - windows
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{github.workspace}}\superbuild\install_Windows\bin\CCV_VR_VWR.exe
        tag: ${{ github.ref }}
        prerelease: true

  build_mac:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    
    runs-on: macos-11

    steps:
    - uses: actions/checkout@v2
    
    - name: Clean superbuild folder
      run: python3 superbuild/clean/clean.py
      
    - name: Open superbuild folder
      run: cd superbuild

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
           cd superbuild 
           cmake -S . -B . -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: |
           cd superbuild
           make
    - name: create .app folder
      run: |
           cd superbuild/install_Darwin
           cp -R ./bin VR-VolumeViewer.app
    - name: create tar-gz
      run: |
           cd superbuild/install_Darwin
           tar -czvf VR-VolumeViewer.tar.gz VR-VolumeViewer.app
    - name: Upload app to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{github.workspace}}/superbuild/install_Darwin/VR-VolumeViewer.tar.gz
        tag: ${{ github.ref }}
        prerelease: true
    - name: Test
      working-directory: ${{github.workspace}}/superbuild/install_Darwin/bin
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run:  ctest
