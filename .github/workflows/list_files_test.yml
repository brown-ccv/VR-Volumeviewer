name: list-files-bat3-folder-test

on:  workflow_dispatch

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build_windows:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    
    runs-on: windows-2019

    steps:
    - uses: actions/checkout@v2
    - uses: ilammy/msvc-dev-cmd@v1
    - uses: seanmiddleditch/gha-setup-ninja@master
    
    - name: Clean superbuild folder
      run: superbuild/clean/clean.bat
      
    - name: clone bat2exe
      run: |
           cd superbuild
           git clone https://github.com/islamadel/bat2exe.git
    - name: List files
      run: |
           cd superbuild\bat2exe\upload
           dir
    - name: Copy bat2exec script
      run: |
           cd superbuild\scripts
           copy CCV_VR_VWR.bat ${{github.workspace}}\superbuild
    - name: List files
      run: |
           cd superbuild\
           dir
    - name: run bat2exec in the background and create vr-volumeviewer executable 
      shell: cmd
      run: superbuild\scripts\execute_bat2exe_background.bat ${{github.workspace}}
    - name: run bat2exec and create vr-volumeviewer executable 
      run: superbuild/bat2exe/upload/bat2exe.exe /source:${{github.workspace}}\superbuild /target:${{github.workspace}}\superbuild /s /y
#    - uses: actions/upload-artifact@v2
#      with:
#       name: CC-VR-VolumeViewer
#       path: ${{github.workspace}}\superbuild\install_Windows\bin\CCV_VR_VWR.exe
#    
#    - name: Create Release
#      id: create_release
#      uses: actions/create-release@v1
#      env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#            tag_name: ${{ github.ref }}
#            release_name: Release ${{ github.ref }}
#            draft: false
#            prerelease: false
#    - name: Upload Release Asset
#      id: upload-release-asset 
#      uses: actions/upload-release-asset@v1
#      env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
#          asset_path: ./my-artifact.zip
#          asset_name: my-artifact.zip
#          asset_content_type: application/zip
#    - name: Test
#      working-directory: ${{github.workspace}}/superbuild/install_Windows/bin
#      # Execute tests defined by the CMake configuration.  
#      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#      run:  ctest
